name: Static Application Security Testing Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-sonarscan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: SonarCloud Begin
        run: dotnet-sonarscanner begin /k:"BrentCaesPXL_sast" /o:"brentcaespxl" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore --configuration Release

      - name: SonarCloud End
        run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  codeql:
    runs-on: ubuntu-latest
    needs: build-and-sonarscan
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          queries: security-extended

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: ./results
  
      - name: Upload CodeQL results
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: ./results

  semgrep:
    runs-on: ubuntu-latest
    needs: build-and-sonarscan
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep Scan (text report)
        run: semgrep --config "p/ci" --config "p/security-audit" --config "p/csharp" --text > semgrep.txt
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep Report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.txt
